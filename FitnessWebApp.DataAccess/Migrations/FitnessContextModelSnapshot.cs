// <auto-generated />
using System;
using FitnessWebApp.DataAccess.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessWebApp.DataAccess.Migrations
{
    [DbContext(typeof(FitnessContext))]
    partial class FitnessContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<double>("CaloriesPerMinute")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Eating", b =>
                {
                    b.Property<int>("EatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EatingId"), 1L, 1);

                    b.Property<DateTime>("MealDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("MealTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Eatings");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"), 1L, 1);

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("Carbohydrates")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("Fats")
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Proteins")
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.FoodEating", b =>
                {
                    b.Property<int>("EatingId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("PortionSize")
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("EatingId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodEating", (string)null);
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Gender", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)");

                    b.HasKey("Name");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("UserId");

                    b.HasIndex("GenderName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Vitamin", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Calcium")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("Iron")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("Magnesium")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("VitaminB12")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("VitaminB6")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("VitaminC")
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("VitaminD")
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("FoodId");

                    b.ToTable("Vitamins");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Eating", b =>
                {
                    b.HasOne("FitnessWebApp.DataAccess.Entities.User", "User")
                        .WithMany("Eatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Exercise", b =>
                {
                    b.HasOne("FitnessWebApp.DataAccess.Entities.Activity", "Activity")
                        .WithMany("Exercises")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessWebApp.DataAccess.Entities.User", "User")
                        .WithMany("Exercises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.FoodEating", b =>
                {
                    b.HasOne("FitnessWebApp.DataAccess.Entities.Eating", "Eating")
                        .WithMany("FoodEatings")
                        .HasForeignKey("EatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessWebApp.DataAccess.Entities.Food", "Food")
                        .WithMany("FoodEatings")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eating");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.User", b =>
                {
                    b.HasOne("FitnessWebApp.DataAccess.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Vitamin", b =>
                {
                    b.HasOne("FitnessWebApp.DataAccess.Entities.Food", "Food")
                        .WithOne("Vitamin")
                        .HasForeignKey("FitnessWebApp.DataAccess.Entities.Vitamin", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Activity", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Eating", b =>
                {
                    b.Navigation("FoodEatings");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Food", b =>
                {
                    b.Navigation("FoodEatings");

                    b.Navigation("Vitamin");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitnessWebApp.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Eatings");

                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
